package mk.ukim.finki.Barber_application.web.controller;


import mk.ukim.finki.Barber_application.model.Barber;
import mk.ukim.finki.Barber_application.model.Street;
import mk.ukim.finki.Barber_application.model.exceptions.BarberByNameNotFoundException;
import mk.ukim.finki.Barber_application.service.BarberService;
import mk.ukim.finki.Barber_application.service.StreetService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Optional;

import static java.lang.Math.abs;

@Controller
@RequestMapping("/showBarbers")
public class BarbersController {

private final BarbershopService barbershopService;
private final StreetService streetService;

public ShowFuelsController(BarbershopService barbershopService, StreetService streetService) {
this.BarbershopService = barbershopService;
this.streetService = streetService;
}

@GetMapping
public String Barber(@RequestParam(required = false) String error, Model model, HttpServletRequest request){

if(error != null && !error.isEmpty()){
model.addAttribute("hasError", "true");
model.addAttribute("error", error);
}

String name = (String) request.getSession().getAttribute("location");

Street street = null;

if(this.streetService.findByName(name).isPresent())
street = this.streetService.findByName(name).get();

List<Barber>
	Barber = this.barbershopService.findFirstTwo(street);

	List<Double>
		distances = this.barbershopService.findDistances(Barber, street);

		List<String>
			times = this.barbershopService.findTimes(distances);

			model.addAttribute("barber", Barbers);
			model.addAttribute("distances", distances);
			model.addAttribute("times", times);
			model.addAttribute("title", "Прикажи фризерски салон");
			model.addAttribute("bodyContent", "showBarber");

			return "master-template";
			}

			@PostMapping
			public String chosenBarber(HttpServletRequest request){

			Optional<Barber> barber;
        try {
            barber = this.barberService.findByName(request.getParameter("chosenBarber"));
            Barber foundBarber = null;
            if(fuel.isPresent()){
                foundBarber = barber.get();
            }

            request.getSession().setAttribute("finalBarber", foundBarber);
            return "redirect:/showMap";
        }catch(BarberByNameNotFoundException exception){
            return "redirect:/showBarber?error="+exception.getMessage();
        }
    }

}
